using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.IO;
using System.Net;

namespace QuickCode
{
    public class WebHookItem
    {
        public string PushUrl { get; set; }

        public DateTime SendTime { get; set; }

        public string BodyData { get; set; }

        /// <summary>
        /// 0 waitRun, 1 CallHttp,2 CallThrowError,3 Done
        /// </summary>
        public int ProgressValue { get; set; }

        /// <summary>
        /// if ProgressValue=2 can get error
        /// </summary>
        public Exception CallLastError
        {
            get;
            set;
        }

        /// <summary>
        /// currentRetry
        /// </summary>
        public int RetryCount { get; set; }
    }

    /// <summary>
    /// Base on Timer to call http task
    /// </summary>
    public sealed class WebHookProvide
    {
        private static object lockObj = new object();

        private static WebHookProvide webhookInstance = null;

        private static Timer tasker = null;

        private static ConcurrentDictionary<string, WebHookItem> currentTaskList;

        private static List<string> waitRemoveTaskList;

        private static bool isTimerWorking = false;

        private static int DoneSumCount = 0;

        private static SemaphoreSlim ChannelTask;

        public ConcurrentDictionary<string, WebHookItem> GetCurrentTaskList { get { return currentTaskList; } }

        public int GetCurrentTaskCount { get { return currentTaskList.Count; } }

        public int GetDoneSumCount { get { return DoneSumCount; } }

        ~WebHookProvide()
        {
            tasker.Dispose();
        }

        private WebHookProvide(int maxThreadNum)
        {
            ChannelTask = new SemaphoreSlim(maxThreadNum, maxThreadNum);

            Init();
        }

        private void Init()
        {
            tasker = new Timer(TimerCallback, null, 500, 2000);

            currentTaskList = new ConcurrentDictionary<string, WebHookItem>(5, 10);
            waitRemoveTaskList = new List<string>(10);
        }

        private void TimerCallback(object state)
        {
            if (isTimerWorking) return;

            lock (lockObj)
            {
                isTimerWorking = true;

                try
                {
                    if (currentTaskList.Count <= 0 && waitRemoveTaskList.Count <= 0) return;

                    PrintMsg("Check Time:{0},Done:{1},AvailableThreadNum={2}", DateTime.Now, DoneSumCount, ChannelTask.CurrentCount);

                    //cast to temp, no effect new add task
                    string[] currentKeys = currentTaskList.Keys.ToArray();

                    foreach (var taskKey in currentKeys)
                    {
                        WebHookItem item = currentTaskList[taskKey];
                        //if (!currentTaskList.TryGetValue(taskKey, out item)) continue;

                        if (item.ProgressValue == 1)
                        {
                            continue;
                        }
                        else if (item.ProgressValue == 3)
                        {
                            PrintMsg("waitRemoveTaskList:{0}", item.PushUrl);
                            waitRemoveTaskList.Add(taskKey);
                            continue;
                        }
                        else if (item.ProgressValue == 2)
                        {
                            item.RetryCount++;
                            int seconds = item.RetryCount * 10;
                            //max three hours
                            if (item.RetryCount >= 720)
                            {
                                seconds = 720 * 10;
                            }
                            item.SendTime = DateTime.Now.AddSeconds(seconds);
                            item.ProgressValue = 0;
                            continue;
                        }

                        if (DateTime.Now < item.SendTime) continue;


                        if (!ChannelTask.Wait(TimeSpan.FromSeconds(10))) continue;
                        
                        item.ProgressValue = 1;

                        Task.Factory.StartNew((obj) =>
                        {
                            WebHookItem item_task = null;
                            try
                            {
                                item_task = obj as WebHookItem;

                                if (item_task == null) return;

                                PrintMsg("Task.Factory.StartNew->>>>>>Start URL={0},DATA={1},stat={2}", item_task.PushUrl, item_task.BodyData, item_task.ProgressValue);

                                System.Net.HttpStatusCode code = PushHttpRequest(item_task);
                                if (code == System.Net.HttpStatusCode.OK)
                                {
                                    Interlocked.Increment(ref DoneSumCount);
                                    item_task.ProgressValue = 3;
                                    PrintMsg("Task.Factory.StartNew->>>>>>End-{3} Success URL={0},DATA={1},stat={2}", item_task.PushUrl, item_task.BodyData, item_task.ProgressValue, DoneSumCount);
                                }
                                else
                                {
                                    new System.Net.WebException("Call Error:" + code.ToString());
                                }
                            }
                            catch (Exception ex)
                            {
                                if (item_task != null)
                                {
                                    item_task.ProgressValue = 2;
                                    item_task.CallLastError = ex;
                                }

                                PrintMsg("Task.Factory.StartNew->>>>>>End Error URL={0},DATA={1},retry={2}", item_task.PushUrl, item_task.BodyData, item_task.RetryCount);
                            }
                            finally
                            {
                                ChannelTask.Release();
                                PrintMsg("Task.Factory.StartNew->>>>>>End Release");
                            }

                        }, item);

                    }

                    WebHookItem item1 = null;
                    foreach (var keyitem in waitRemoveTaskList)
                    {
                        currentTaskList.TryRemove(keyitem, out item1);
                        PrintMsg("TryRemove:{0}", item1.PushUrl);
                    }
                    waitRemoveTaskList.Clear();

                }
                catch (Exception ex)
                {
                    PrintMsg(ex.ToString());
                }
                finally
                {
                    isTimerWorking = false;
                }
            }
        }

        private System.Net.HttpStatusCode PushHttpRequest(WebHookItem item)
        {
            PrintMsg("[PushHttpRequest]->>>>URL={0},DATA={1}", item.PushUrl, item.BodyData);

            HttpWebRequest request = HttpWebRequest.CreateHttp(item.PushUrl);
            request.Method = WebRequestMethods.Http.Post;
            request.ContentType = "text/plain";

            byte[] datas = Encoding.UTF8.GetBytes(item.BodyData);

            request.ContentLength = datas.Length;

            using (Stream reqStream = request.GetRequestStream())
            {
                reqStream.Write(datas, 0, datas.Length);
                using (System.Net.HttpWebResponse response = (System.Net.HttpWebResponse)request.GetResponse())
                {
                    return response.StatusCode;
                }
            }
        }

        public bool PushMsg(string url, string pushData, int? delayBySecond = null)
        {
            TimeSpan? delayTime = null;
            if (delayBySecond != null)
            {
                delayTime = TimeSpan.FromSeconds((double)delayBySecond);
            }
            return PushMsg(url, pushData, delayTime);
        }

        public bool PushMsg(string url, string pushData, TimeSpan? delayTime = null)
        {
            WebHookItem whi;
            try
            {
                whi = new WebHookItem()
                   {
                       PushUrl = url,
                       BodyData = pushData
                   };
                if (delayTime != null && delayTime.Value.TotalSeconds > 0)
                {
                    whi.SendTime = DateTime.Now.Add(delayTime.Value);
                }

                int retry = 0;
                bool result = false;
                string key = Guid.NewGuid().ToString("N");
                while (!result)
                {
                    PrintMsg("PushMsg->>>>>>Start URL={0},DATA={1},stat={2}", whi.PushUrl, whi.BodyData, whi.ProgressValue);
                    result = currentTaskList.TryAdd(key, whi);
                    if (retry >= 3)
                    {
                        PrintMsg("PushMsg->>>>>>Retry={0}", retry);
                        break;
                    }
                    Thread.Sleep(50);
                    retry++;
                }
                return result;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public bool RemoveMsg(string key)
        {
            isTimerWorking = true;
            WebHookItem remove = null;
            StopTask();
            try
            {
                return currentTaskList.TryRemove(key, out remove);
            }
            finally
            {
                isTimerWorking = false;
                StartTask();
            }
        }

        public bool StopTask()
        {
            return tasker.Change(Timeout.Infinite, 1000000000);
        }

        public bool StartTask()
        {
            return tasker.Change(500, 2000);
        }

        /// <summary>
        /// Instance WebHookProvide
        /// </summary>
        /// <param name="maxThreadNum">maxThreadNum</param>
        /// <returns></returns>
        public static WebHookProvide Instance(Int16 maxThreadNum = 50)
        {
            if (webhookInstance == null)
            {
                lock (lockObj)
                {
                    //double check
                    if (webhookInstance == null)
                    {
                        return new WebHookProvide(maxThreadNum);
                    }

                }
            }

            return webhookInstance;
        }

        private void PrintMsg(string formate, params object[] values)
        {
#if DEBUG
            Console.WriteLine(formate, values);
            System.Diagnostics.Debug.WriteLine(formate, values);
#endif

        }

    }







}
